#!/usr/bin/env bash

set -euo pipefail

ROOT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
COMPOSE_FILE="${ROOT_DIR}/tooling/dev/compose.yaml"
TARGETS_FILE="${ROOT_DIR}/tooling/dev/targets.json"

# Argument buckets
BASE_ARGS=()
JEST_ARGS=()
EXTRA_ARGS=()
PASSTHROUGH_CMD=()
FILTERED_ARGS=()
BASE_MODE=false
JEST_MODE=false
PASSTHROUGH_MODE=false

# -----------------------------------------------
# Auto-detect platform/arch/libc
# -----------------------------------------------
detect_platform_args() {
    local arch="$(uname -m)"
    local libc=""

    # Default values. NODE_PLATFORM and NODE_LIBC can stay as is because the build target is node:alpine
    NODE_ARCH="arm64"
    NODE_PLATFORM="linuxmusl"
    NODE_LIBC="musl"

    case "$arch" in
        aarch64 | arm64)
            NODE_ARCH="arm64"
            ;;
        x86_64 | amd64)
            NODE_ARCH="amd64"
            ;;
        *)
            echo "Unsupported architecture: $arch"
            exit 1
            ;;
    esac
}

# Call immediately so the variables are ready
detect_platform_args

# -------------------------
# Load targets and schemas
# -------------------------
declare -A COMMANDS CONTAINERS BASE_REQUIRED JEST_CONFIG

if [[ ! -f "$TARGETS_FILE" ]]; then
    echo "Error: Target list file not found: $TARGETS_FILE"
    exit 1
fi

# key           = target name
# commands      = supported commands (start|stop|...)
# containers    = container names (separated by |)
# base_flag     = "yes" if base image is needed
# rest          = optional Jest config path
# Load JSON using Python 3
eval "$(
  python3 - "$TARGETS_FILE" <<EOF
import sys, json
with open(sys.argv[1]) as f:
    targets = json.load(f)

for name, conf in targets.items():
    if isinstance(conf, list):
        print(f'COMMANDS[{name}]="{"|".join(conf)}"')
        print(f'CONTAINERS[{name}]="{name}"')
    elif isinstance(conf, dict):
        print(f'COMMANDS[{name}]="{"|".join(conf.get("commands", []))}"')
        print(f'CONTAINERS[{name}]="{" ".join(conf.get("containers", [name]))}"')
        if conf.get("requires_base"):
            print(f'BASE_REQUIRED[{name}]=1')
        if "jest_config" in conf:
            print(f'JEST_CONFIG[{name}]="{conf["jest_config"]}"')
EOF
)"

# --------------------------------------------------
# Helpers to show usage instructions
# --------------------------------------------------
print_targets_for_command() {
    local command="$1"
    local found=false

    for key in "${!COMMANDS[@]}"; do
        IFS='|' read -ra actions <<< "${COMMANDS[$key]}"
        for action in "${actions[@]}"; do
            if [[ "$action" == "$command" ]]; then
                if [[ $found == false ]]; then
                    echo ""
                    echo "Available targets:"
                    found=true
                fi

                echo "  - $key"
                break
            fi
        done
    done
    
    echo ""
    echo ""
}

print_help() {
    local section="${1:-index}"
    local help_file="$ROOT_DIR/scripts/dev-env.help"

    if [[ ! -f "$help_file" ]]; then
        echo "Help file not found: $help_file"
        exit 1
    fi

    awk -v section="## $section" '
        $0 == section {found=1; next}
        /^## / && found {exit}
        found {print}
    ' "$help_file"

    print_targets_for_command "$section"
}

# --------------------------------------------------
# Function to build base image
# --------------------------------------------------
build_base_image_if_needed() {
    echo "Building shared base image for $NODE_ARCH/$NODE_PLATFORM ($NODE_LIBC)..."

    local build_args=(
        --build-arg NODE_ARCH="$NODE_ARCH"
        --build-arg NODE_PLATFORM="$NODE_PLATFORM"
        --build-arg NODE_LIBC="$NODE_LIBC"
        -t nuxt-bnb-base:dev
        -f "$ROOT_DIR/tooling/dev/base/Dockerfile.base"
        "$ROOT_DIR"
    )   

    if [[ ${#BASE_ARGS[@]} -gt 0 ]]; then
        build_args+=("${BASE_ARGS[@]}")
    fi

    docker build "${build_args[@]}"
}

handle_base_build_logic() {
    local command="$1"
    local target="$2"

    case "$command" in
        start|run|test) ;;
        *)
            if [[ ${#BASE_ARGS[@]} -gt 0 ]]; then
                echo "Error: --base is only allowed with 'start', 'run', or 'test' commands"
                exit 1
            fi
            return 0
            ;;
    esac

    if [[ ${BASE_REQUIRED["$target"]+_} ]]; then
        build_base_image_if_needed
    elif [[ ${#BASE_ARGS[@]} -gt 0 ]]; then
        echo "Error: --base provided but target '$target' does not use base image"
        exit 1
    fi
}
# --------------------------------------------------
# Helpers to show validate command and target
# --------------------------------------------------
is_valid_target() {
    local key="${1:-}"
    [[ -n "$key" && -n "${COMMANDS[$key]+_}" ]]
}

is_valid_command() {
    local target="${1:-}"
    local command="${2:-}"
    [[ "${COMMANDS[$target]}" == *"$command"* ]]
}

has_test_config() {
    [[ -n "${JEST_CONFIG[$1]}" ]]
}

# --------------------------------------------------
# Helper to parse command args
# --------------------------------------------------
parse_extra_args() {
    for arg in "$@"; do
        case "$arg" in
            --base)
                BASE_MODE=true
                JEST_MODE=false
                PASSTHROUGH_MODE=false
                continue
                ;;
            --jest)
                JEST_MODE=true
                BASE_MODE=false
                PASSTHROUGH_MODE=false
                continue
                ;;
            -- ) 
                PASSTHROUGH_MODE=true
                JEST_MODE=false
                BASE_MODE=false
                continue
                ;;
        esac

        if $BASE_MODE; then
            BASE_ARGS+=("$arg")
        elif $JEST_MODE; then
            JEST_ARGS+=("$arg")
        elif $PASSTHROUGH_MODE; then
            PASSTHROUGH_CMD+=("$arg")
        else
            FILTERED_ARGS+=("$arg")
        fi
    done
}

# -------------------------
# Main CLI handling
# -------------------------
COMMAND="${1:-}"
TARGET="${2:-}"
shift 2 || true
EXTRA_ARGS=("$@")
parse_extra_args "${EXTRA_ARGS[@]}"

if [[ "$COMMAND" != "test" && ${#JEST_ARGS[@]} -gt 0 ]]; then
    echo "Error: --jest can only be used with the 'test' command"
    exit 1
fi

if [[ "$COMMAND" != "run" && ${#PASSTHROUGH_CMD[@]} -gt 0 ]]; then
    echo "Error: -- can only be used with the 'run' command"
    exit 1
fi

handle_base_build_logic "$COMMAND" "$TARGET"

case "$COMMAND" in
    start)
        if ! is_valid_target "$TARGET" || ! is_valid_command "$TARGET" start; then
            echo "Invalid target: $TARGET"
            exit 1
        fi
        echo "Starting $TARGET..."
        
        IFS=' ' read -r -a containers <<< "${CONTAINERS[$TARGET]}"
        for container in "${containers[@]}"; do
            echo " → Starting container: $container"
            docker compose -f "$COMPOSE_FILE" up "${FILTERED_ARGS[@]}" "$container"
        done
        ;;

    stop)
        if ! is_valid_target "$TARGET" || ! is_valid_command "$TARGET" stop; then
            echo "Invalid target: $TARGET"
            exit 1
        fi
        
        IFS=' ' read -r -a containers <<< "${CONTAINERS[$TARGET]}"
        for container in "${containers[@]}"; do
            echo " → Stopping container: $container"
            docker compose -f "$COMPOSE_FILE" down "${FILTERED_ARGS[@]}" "$container"
        done
        ;;

    test)
        run_test_target() {
            if ! is_valid_target "$TARGET" || ! is_valid_command "$TARGET" test; then
                echo "Invalid target: $TARGET"
                exit 1
            fi
            if ! has_test_config "$TARGET"; then
                echo "No test config set up for $TARGET"
                exit 1
            fi

            IFS=' ' read -r -a containers <<< "${CONTAINERS[$TARGET]}"
            local targetContainer="${containers[0]}"

            echo "Running test $TARGET..."

            local config_path="${JEST_CONFIG[$TARGET]}"
            local jest_command="NODE_OPTIONS=--experimental-vm-modules npx jest --config $config_path"

            if [[ ${#JEST_ARGS[@]} -eq 0 ]]; then
                jest_command="$jest_command --coverage"
            else
                jest_command="$jest_command ${JEST_ARGS[*]}"
            fi

            docker compose -f "$COMPOSE_FILE" run --rm --build "${FILTERED_ARGS[@]}" "$targetContainer" \
                sh -c "$jest_command"

        }
        run_test_target
        ;;

    connect)
        if ! is_valid_target "$TARGET" || ! is_valid_command "$TARGET" connect; then
            echo "Cannot connect to target: $TARGET"
            exit 1
        fi
        echo "Connecting to running container: $TARGET..."
        docker compose -f "$COMPOSE_FILE" exec "$TARGET" sh
        ;;

    run)
        run_run_target() {
            if ! is_valid_target "$TARGET" || ! is_valid_command "$TARGET" run; then
                echo "Invalid target: $TARGET"
                exit 1
            fi

            IFS=' ' read -r -a containers <<< "${CONTAINERS[$TARGET]}"
            local targetContainer="${containers[0]}"

            echo "Running command in container: $targetContainer"

            if [[ ${#PASSTHROUGH_CMD[@]} -eq 0 ]]; then
                echo " → Opening interactive shell..."
                docker compose -f "$COMPOSE_FILE" run --rm "${FILTERED_ARGS[@]}" "$targetContainer"
            else
                docker compose -f "$COMPOSE_FILE" run --rm "${FILTERED_ARGS[@]}" "$targetContainer" \
                    sh -c "$(printf '%q ' "${PASSTHROUGH_CMD[@]}")"
            fi
        }
        run_run_target
        ;;

    status)
        echo "Showing container status..."
        docker compose -f "$COMPOSE_FILE" ps
        ;;

    help)
        print_help "${TARGET:-index}"
        exit 0
        ;;

    *)
        echo "Wrong usage"
        echo "Run ./scripts/dev-env help <command> for more info"
        exit 1
        ;;
esac
