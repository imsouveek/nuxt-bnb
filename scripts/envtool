#!/usr/bin/env python3
import sys
import json
import re
from pathlib import Path

MERGED_FILE_EXTENSION = "merged"
SAMPLE_FILE_EXTENSION = "sample"

ROOT_DIR = Path(__file__).resolve().parent.parent
ENV_DIR = ROOT_DIR / "tooling"

def usage():
    print("Usage:")
    print("  envtool.py [env] --merge")
    print("  envtool.py [env] --split")
    print("  envtool.py [env] --sample")
    print("  envtool.py [env] --split-sample")
    print("  envtool.py [env] --clean")
    sys.exit(1)

def check_config(config_path):
    if not config_path.exists():
        print(f"Missing {config_path}")
        sys.exit(1)

def load_mask_keys(config_file):
    with open(config_file) as f:
        cfg = json.load(f)
    return set(cfg.get("mask_keys", []))

def merge_env_files(env_name, env_path, env_files, merged_file):
    if not env_files:
        print(f"No .env files found to merge in {env_path}")
        sys.exit(1)
    print(f"Merging files into {merged_file}")
    with open(merged_file, "w") as out:
        for f in env_files:
            rel = f.relative_to(env_path)
            out.write(f"# From {rel}\n")
            out.write(f.read_text())
            out.write("\n\n")

    # collapse extra blank lines
    lines = merged_file.read_text().splitlines()
    with open(merged_file, "w") as f:
        blank = False
        for line in lines:
            if line.strip():
                f.write(line + "\n")
                blank = False
            elif not blank:
                f.write("\n")
                blank = True
    print(f"Merged env written to {merged_file}")

def split_env_file(env_name, env_path, merged_file):
    if not merged_file.exists():
        print(f"Merged file not found: {merged_file}")
        sys.exit(1)

    current_file = None
    for line in merged_file.read_text().splitlines():
        if line.startswith("# From "):
            rel_path = line.replace("# From ", "").strip()
            if rel_path.startswith("../") or "/../" in rel_path:
                print(f"Unsafe relative path: {rel_path}")
                sys.exit(1)
            target_path = env_path / rel_path
            target_path.parent.mkdir(parents=True, exist_ok=True)
            current_file = target_path
            current_file.write_text("")
        elif current_file:
            current_file.write_text(current_file.read_text() + line + "\n")
    print("Split complete.")

def generate_sample_files(env_name, env_path, env_files, config_file):
    mask_keys = load_mask_keys(config_file)
    top_sample = env_path / f".env.{env_name}.{MERGED_FILE_EXTENSION}.{SAMPLE_FILE_EXTENSION}"

    with open(top_sample, "w") as top_out:
        for f in env_files:
            sample_file = f.with_suffix(f.suffix + f".{SAMPLE_FILE_EXTENSION}")
            lines = []
            for line in f.read_text().splitlines():
                if re.match(r'^[A-Za-z_][A-Za-z0-9_]*=.*', line):
                    k, _ = line.split("=", 1)
                    line = f"{k}=xxxxx" if k in mask_keys else line
                lines.append(line)
            sample_file.write_text("\n".join(lines))
            rel = f.relative_to(env_path)
            top_out.write(f"# From {rel}\n" + "\n".join(lines) + "\n\n")
    print(f"Sample files generated: {top_sample}")

def clean_env_files(env_name, env_path):
    pattern = f".env.{env_name}.{MERGED_FILE_EXTENSION}"
    deleted = False
    for p in env_path.rglob(f".env*{MERGED_FILE_EXTENSION}*"):
        print(f"Deleting {p}")
        p.unlink()
        deleted = True
    if not deleted:
        print("No merged or sample files found.")
    else:
        print("Cleanup complete.")

def split_sample_file(env_name, env_path, config_file):
    sample_file = env_path / f".env.{env_name}.{MERGED_FILE_EXTENSION}.{SAMPLE_FILE_EXTENSION}"
    if not sample_file.exists():
        print(f"Sample merged file not found: {sample_file}")
        sys.exit(1)
    mask_keys = load_mask_keys(config_file)

    current_file = None
    for line in sample_file.read_text().splitlines():
        if line.startswith("# From "):
            rel_path = line.replace("# From ", "").strip()
            current_file = env_path / rel_path
            current_file.write_text("")
        elif current_file and re.match(r'^[A-Za-z_][A-Za-z0-9_]*=', line):
            k = line.split("=", 1)[0]
            if k not in mask_keys:
                current_file.write_text(current_file.read_text() + line + "\n")
        elif current_file:
            current_file.write_text(current_file.read_text() + line + "\n")
    print("Split-sample complete.")

def main():
    if len(sys.argv) != 3:
        usage()
    env_name = sys.argv[1]
    action = sys.argv[2]

    env_path = ENV_DIR / env_name
    config_file = env_path / "envconfig.json"
    merged_file = env_path / f".env.{env_name}.{MERGED_FILE_EXTENSION}"

    if not env_path.exists():
        print(f"Environment directory not found: {env_path}")
        sys.exit(1)
    check_config(config_file)

    env_files = sorted(p for p in env_path.glob("**/.env") if MERGED_FILE_EXTENSION not in str(p) and SAMPLE_FILE_EXTENSION not in str(p))

    if action == "--merge":
        merge_env_files(env_name, env_path, env_files, merged_file)
    elif action == "--split":
        split_env_file(env_name, env_path, merged_file)
    elif action == "--sample":
        generate_sample_files(env_name, env_path, env_files, config_file)
    elif action == "--clean":
        clean_env_files(env_name, env_path)
    elif action == "--split-sample":
        split_sample_file(env_name, env_path, config_file)
    else:
        usage()

if __name__ == "__main__":
    main()
